{"version":3,"file":"static/js/515.b727e7dd.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ButtonLarge/ButtonLarge.module.scss?1c7d","components/ButtonLarge/ButtonLarge.jsx","webpack://react-homework-template/./src/components/ErrorMessage/ErrorMessage.module.scss?a3ad","components/ErrorMessage/ErrorMessage.jsx","webpack://react-homework-template/./src/components/Heading/Heading.module.scss?1460","components/Heading/Heading.jsx","webpack://react-homework-template/./src/components/Input/Input.module.scss?f352","components/Input/Input.jsx","webpack://react-homework-template/./src/components/Loader/Loader.module.scss?a435","components/Loader/Loader.jsx","redux/phonebook/phonebookSelectors.js","../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/ContactsForm/ContactsForm.module.scss?38cb","components/ContactsForm/ContactsForm.jsx","webpack://react-homework-template/./src/components/ContactsList/ContactsList.module.scss?9b70","webpack://react-homework-template/./src/components/ContactItem/ContactItem.module.scss?1c6f","webpack://react-homework-template/./src/components/ButtonSmall/ButtonSmall.module.scss?0746","components/ButtonSmall/ButtonSmall.jsx","webpack://react-homework-template/./src/components/Modal/Modal.module.scss?b72d","components/Modal/Modal.jsx","components/ContactItem/ContactItem.jsx","components/ContactsList/ContactsList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.scss?573d","components/Filter/Filter.jsx","pages/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"button\":\"ButtonLarge_button__efBbg\"};","import css from './ButtonLarge.module.scss';\nimport PropTypes from 'prop-types';\n\nconst ButtonLarge = function ({ type, text, handler, children }) {\n  return (\n    <button className={css.button} type={type} onClick={handler}>\n      {children}\n      {text}\n    </button>\n  );\n};\n\nButtonLarge.propTypes = {\n  type: PropTypes.oneOf(['button', 'submit']).isRequired,\n  text: PropTypes.string.isRequired,\n  handler: PropTypes.func,\n};\n\nexport default ButtonLarge;\n","// extracted by mini-css-extract-plugin\nexport default {\"error-thumb\":\"ErrorMessage_error-thumb__Idhqd\",\"error-message\":\"ErrorMessage_error-message__OpG+f\"};","import css from './ErrorMessage.module.scss';\nimport PropTypes from 'prop-types';\n\nconst ErrorMessage = function ({ message }) {\n  return (\n    <div className={css['error-thumb']}>\n      <p className={css['error-message']}>{message}</p>\n    </div>\n  );\n};\n\nErrorMessage.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default ErrorMessage;\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Heading_title__KZlGj\"};","import css from './Heading.module.scss';\nimport PropTypes from 'prop-types';\n\nconst Heading = function ({ tag, text }) {\n  const Tag = tag || 'h1';\n\n  return <Tag className={css.title}>{text}</Tag>;\n};\n\nHeading.propTypes = {\n  tag: PropTypes.string,\n  text: PropTypes.string.isRequired,\n};\n\nexport default Heading;\n","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Input_label__U9NhE\",\"input\":\"Input_input__k5Ctk\"};","import css from './Input.module.scss';\nimport PropTypes from 'prop-types';\n\nconst Input = function ({\n  label,\n  type,\n  name,\n  value,\n  handler,\n  pattern,\n  title,\n  required,\n}) {\n  return (\n    <label className={css.label}>\n      {label}\n      <input\n        className={css.input}\n        type={type}\n        name={name}\n        value={value}\n        onChange={handler}\n        pattern={pattern}\n        title={title}\n        required={required}\n      />\n    </label>\n  );\n};\n\nInput.propTypes = {\n  label: PropTypes.string.isRequired,\n  type: PropTypes.oneOf(['text', 'tel', 'email', 'password']).isRequired,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  handler: PropTypes.func.isRequired,\n  pattern: PropTypes.string,\n  title: PropTypes.string,\n  required: PropTypes.bool.isRequired,\n};\n\nexport default Input;\n","// extracted by mini-css-extract-plugin\nexport default {\"loader-thumb\":\"Loader_loader-thumb__fhQxX\"};","import css from './Loader.module.scss';\nimport { RotatingLines } from 'react-loader-spinner';\n\nconst Loader = function () {\n  return (\n    <div className={css['loader-thumb']}>\n      <RotatingLines\n        strokeColor=\"#FFA500\"\n        strokeWidth=\"5\"\n        animationDuration=\"0.75\"\n        width=\"96\"\n        visible={true}\n      />\n    </div>\n  );\n};\n\nexport default Loader;\n","export const contactsSelector = state => state.phonebook.contacts.items;\nexport const filteredContactsSelector = state => {\n  const filteredContacts = state.phonebook.contacts.items.filter(contact =>\n    contact.name.toLowerCase().includes(state.phonebook.filter.toLowerCase())\n  );\n  return filteredContacts;\n};\nexport const filterSelector = state => state.phonebook.filter;\nexport const isLoadingSelector = state => state.phonebook.contacts.isLoading;\nexport const errorSelector = state => state.phonebook.contacts.error;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactsForm_form__gLQuS\"};","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactsSelector } from 'redux/phonebook/phonebookSelectors';\nimport { nanoid } from 'nanoid';\nimport { addNewContactThunk } from 'redux/phonebook/phonebookThunks';\nimport Input from 'components/Input/Input';\nimport css from './ContactsForm.module.scss';\nimport ButtonLarge from 'components/ButtonLarge/ButtonLarge';\n\nconst ContactsForm = function () {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contactsList = useSelector(contactsSelector);\n  const dispatch = useDispatch();\n\n  const getExistNames = () => {\n    return contactsList.map(({ name }) => name);\n  };\n\n  const handlerInputChange = event => {\n    if (event.target.name === 'name') {\n      setName(event.target.value);\n    }\n    if (event.target.name === 'number') {\n      setNumber(event.target.value);\n    }\n  };\n\n  const handlerSubmitForm = event => {\n    event.preventDefault();\n\n    if (!getExistNames().includes(name)) {\n      const newContact = {\n        id: nanoid(5),\n        name,\n        number,\n      };\n      setName('');\n      setNumber('');\n      dispatch(addNewContactThunk(newContact));\n    } else {\n      window.alert(`${name} is already in contacts.`);\n    }\n  };\n\n  return (\n    <form className={css.form} onSubmit={e => handlerSubmitForm(e)}>\n      <Input\n        label=\"Name\"\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        handler={handlerInputChange}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required={true}\n      />\n      <Input\n        label=\"Phone number\"\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        handler={handlerInputChange}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required={true}\n      />\n      <ButtonLarge type=\"submit\" text=\"Add contact\" />\n    </form>\n  );\n};\n\nexport default ContactsForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsList\":\"ContactsList_contactsList__0E36l\"};","// extracted by mini-css-extract-plugin\nexport default {\"contactItem\":\"ContactItem_contactItem__eVND2\",\"contactText\":\"ContactItem_contactText__Rjx7a\",\"phoneText\":\"ContactItem_phoneText__s0fTo\"};","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"ButtonSmall_button__p3P4I\"};","import css from './ButtonSmall.module.scss';\nimport PropTypes from 'prop-types';\n\nconst ButtonSmall = function ({ type, text, id, handler }) {\n  return (\n    <button className={css.button} type={type} id={id} onClick={handler}>\n      {text}\n    </button>\n  );\n};\n\nButtonSmall.propTypes = {\n  type: PropTypes.oneOf(['submit', 'button']).isRequired,\n  text: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  handler: PropTypes.func.isRequired,\n};\n\nexport default ButtonSmall;\n","// extracted by mini-css-extract-plugin\nexport default {\"overlay\":\"Modal_overlay__b+zEz\",\"modal\":\"Modal_modal__yEgVW\",\"form\":\"Modal_form__Kth9F\",\"buttons-thumb\":\"Modal_buttons-thumb__QW5dC\"};","import css from './Modal.module.scss';\nimport Input from 'components/Input/Input';\nimport ButtonLarge from 'components/ButtonLarge/ButtonLarge';\nimport Heading from 'components/Heading/Heading';\nimport PropTypes from 'prop-types';\n\nconst Modal = function ({\n  currentName,\n  currentNumber,\n  handlerInputChange,\n  handlerSubmit,\n  closeModal,\n}) {\n  return (\n    <div className={css.overlay}>\n      <div className={css.modal}>\n        <Heading tag=\"h3\" text=\"Edit contact\" />\n        <form className={css.form} onSubmit={handlerSubmit}>\n          <Input\n            label=\"Name\"\n            type=\"text\"\n            name=\"name\"\n            value={currentName}\n            handler={handlerInputChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            required={true}\n          />\n          <Input\n            label=\"Phone number\"\n            type=\"tel\"\n            name=\"number\"\n            value={currentNumber}\n            handler={handlerInputChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            required={true}\n          />\n          <div className={css['buttons-thumb']}>\n            <ButtonLarge type=\"submit\" text=\"Confirm\" />\n            <ButtonLarge type=\"button\" text=\"Chancel\" handler={closeModal} />\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nModal.propTypes = {\n  currentName: PropTypes.string.isRequired,\n  currentNumber: PropTypes.string.isRequired,\n  handlerInputChange: PropTypes.func.isRequired,\n  handlerSubmit: PropTypes.func.isRequired,\n  closeModal: PropTypes.func.isRequired,\n};\n\nexport default Modal;\n","import css from './ContactItem.module.scss';\nimport { useDispatch } from 'react-redux';\nimport {\n  deleteContactThunk,\n  editContactThunk,\n  getContactsThunk,\n} from 'redux/phonebook/phonebookThunks';\nimport PropTypes from 'prop-types';\nimport ButtonSmall from 'components/ButtonSmall/ButtonSmall';\nimport { useState } from 'react';\nimport Modal from 'components/Modal/Modal';\n\nconst ContactItem = function ({ name, number, id }) {\n  const [updatedName, setUpdatedName] = useState(name);\n  const [updatedNumber, setUpdatedNumber] = useState(number);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const dispatch = useDispatch();\n\n  const handlerCloseModal = () => {\n    setIsModalOpen(false);\n  };\n\n  const handlerSubmitEditForm = event => {\n    event.preventDefault();\n    setIsModalOpen(false);\n\n    const editedContact = {\n      name: updatedName,\n      number: updatedNumber,\n    };\n    dispatch(editContactThunk({ id, editedContact }));\n  };\n\n  const handlerInputChange = event => {\n    if (event.target.name === 'name') {\n      setUpdatedName(event.target.value);\n    }\n    if (event.target.name === 'number') {\n      setUpdatedNumber(event.target.value);\n    }\n  };\n\n  return (\n    <>\n      <li className={css.contactItem}>\n        <p className={css.contactText}>{name}</p>\n        <p className={css.phoneText}>{number}</p>\n        <ButtonSmall\n          type=\"button\"\n          text=\"Edit\"\n          id={id}\n          handler={() => {\n            setIsModalOpen(true);\n          }}\n        />\n        <ButtonSmall\n          type=\"button\"\n          text=\"Delete\"\n          id={id}\n          handler={() => {\n            dispatch(deleteContactThunk(id));\n            dispatch(getContactsThunk());\n          }}\n        />\n      </li>\n      {isModalOpen && (\n        <Modal\n          currentName={updatedName}\n          currentNumber={updatedNumber}\n          handlerInputChange={handlerInputChange}\n          handlerSubmit={handlerSubmitEditForm}\n          closeModal={handlerCloseModal}\n        />\n      )}\n    </>\n  );\n};\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n\nexport default ContactItem;\n","import { useEffect } from 'react';\nimport css from './ContactsList.module.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  filteredContactsSelector,\n  isLoadingSelector,\n  errorSelector,\n} from 'redux/phonebook/phonebookSelectors';\nimport ContactItem from 'components/ContactItem/ContactItem';\nimport { getContactsThunk } from 'redux/phonebook/phonebookThunks';\nimport ErrorMessage from 'components/ErrorMessage/ErrorMessage';\nimport Loader from 'components/Loader/Loader';\n\nconst ContactsList = function () {\n  const filteredContacts = useSelector(filteredContactsSelector);\n  const isLoading = useSelector(isLoadingSelector);\n  const errorMessage = useSelector(errorSelector);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getContactsThunk());\n  }, [dispatch]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {errorMessage ? (\n        <ErrorMessage message={errorMessage} />\n      ) : filteredContacts.length > 0 ? (\n        <ul className={css.contactsList}>\n          {filteredContacts.map(({ id, name, number }) => {\n            return <ContactItem key={id} name={name} number={number} id={id} />;\n          })}\n        </ul>\n      ) : (\n        <ErrorMessage message={'There is no any contact'} />\n      )}\n    </>\n  );\n};\n\nexport default ContactsList;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__asygT\"};","import css from './Filter.module.scss';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filterSelector } from 'redux/phonebook/phonebookSelectors';\nimport { updateFilter } from 'redux/phonebook/phonebookSlice';\nimport Input from 'components/Input/Input';\n\nconst Filter = function () {\n  const filter = useSelector(filterSelector);\n  const dispatch = useDispatch();\n\n  const handlerFilterInputChange = event => {\n    const { value } = event.target;\n    dispatch(updateFilter(value));\n  };\n\n  return (\n    <div className={css.filter}>\n      <Input\n        label=\"Find contacts by name\"\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        handler={e => handlerFilterInputChange(e)}\n        required={false}\n      />\n    </div>\n  );\n};\n\nexport default Filter;\n","import ContactsForm from 'components/ContactsForm/ContactsForm';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport Filter from 'components/Filter/Filter';\nimport Heading from 'components/Heading/Heading';\nconst ContactsPage = function () {\n  return (\n    <div>\n      <Heading text='Contacts' />\n      <ContactsForm />\n      <Heading tag='h2' text='Contacts List' />\n      <Filter />\n      <ContactsList />\n    </div>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["type","text","handler","children","className","css","onClick","message","tag","Tag","label","name","value","pattern","title","required","onChange","strokeColor","strokeWidth","animationDuration","width","visible","contactsSelector","state","phonebook","contacts","items","filteredContactsSelector","filter","contact","toLowerCase","includes","filterSelector","isLoadingSelector","isLoading","errorSelector","error","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","useState","setName","number","setNumber","contactsList","useSelector","dispatch","useDispatch","handlerInputChange","event","target","handlerSubmitForm","preventDefault","map","window","alert","newContact","addNewContactThunk","onSubmit","e","Input","ButtonLarge","currentName","currentNumber","handlerSubmit","closeModal","Heading","updatedName","setUpdatedName","updatedNumber","setUpdatedNumber","isModalOpen","setIsModalOpen","deleteContactThunk","getContactsThunk","editedContact","editContactThunk","filteredContacts","errorMessage","useEffect","Loader","ErrorMessage","length","updateFilter","handlerFilterInputChange"],"sourceRoot":""}